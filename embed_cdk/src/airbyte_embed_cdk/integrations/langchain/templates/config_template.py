# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2023-07-28T03:29:33+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, Extra, Field, conint


class ConfigTemplate(BaseModel):
    class Config:
        extra = Extra.allow

    count: conint(ge=1) = Field(
        ...,
        description='How many users should be generated in total.  This setting does not apply to the purchases or products stream.',
        title='Count',
    )
    seed: Optional[int] = Field(
        -1,
        description='Manually control the faker random seed to return the same values on subsequent runs (leave -1 for random)',
        title='Seed',
    )
    records_per_slice: Optional[conint(ge=1)] = Field(
        1000,
        description='How many fake records will be in each page (stream slice), before a state message is emitted?',
        title='Records Per Stream Slice',
    )
    always_updated: Optional[bool] = Field(
        True,
        description='Should the updated_at values for every record be new each sync?  Setting this to false will case the source to stop '
                    ''
                    'emitting records after COUNT records have been emitted.',
        title='Always Updated',
    )
    parallelism: Optional[conint(ge=1)] = Field(
        4,
        description='How many parallel workers should we use to generate fake data?  Choose a value equal to the number of CPUs you will '
                    'allocate to this source.',
        title='Parallelism',
    )
